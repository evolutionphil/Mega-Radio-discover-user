Smart TV Genre API Guide for Mega Radio
üìö Complete Genre API Documentation
This guide provides detailed documentation for all genre-related API endpoints, specifically designed for Samsung Tizen and LG webOS Smart TV developers. Learn how to fetch genres, filter by country, get genre details, and retrieve stations.

‚ö†Ô∏è CRITICAL: TV Parameter Required
ALL API requests from Smart TVs MUST include ?tv=1 parameter to disable server compression.

// ‚ùå WRONG - Will fail on TVs
const url = 'https://themegaradio.com/api/genres';
// ‚úÖ CORRECT - Works on TVs
const url = 'https://themegaradio.com/api/genres?tv=1';
Samsung and LG TVs cannot decompress compressed HTTP responses. The server automatically disables compression when ?tv=1 is present.

üéØ Quick Navigation
Get All Genres - Browse genres with optional country filtering
Get Discoverable Genres - Featured genres for homepage
Get Genre by Slug - Get single genre details
Get Stations by Genre - Fetch stations for a specific genre
Get Genre Statistics - Top countries and related genres
Complete Example App
1. Get All Genres
Fetch all available genres with optional pagination, sorting, and country filtering.

Endpoint
GET /api/genres?tv=1
Query Parameters
Parameter	Type	Required	Default	Description
tv	number	YES	-	Must be 1 to disable compression
page	number	No	1	Page number for pagination
limit	number	No	9	Number of genres per page
sortColumn	string	No	stationCount	Sort field: stationCount, name
sortBy	string	No	desc	Sort order: asc, desc
filters	string	No	{}	JSON string with countrycode and searchQuery
Country Filtering
To filter genres by country, pass a JSON object in the filters parameter:

const filters = JSON.stringify({
  countrycode: "Germany",  // Country name
  searchQuery: ""          // Optional search term
});
const url = `https://themegaradio.com/api/genres?tv=1&filters=${encodeURIComponent(filters)}`;
Response Format
{
  "data": [
    {
      "_id": "genre-pop",
      "name": "Pop",
      "slug": "pop",
      "posterImage": "/images/genre-pop.webp",
      "discoverableImage": "/images/genre-pop-discover.webp",
      "description": "Popular music and stations",
      "stationCount": 8523,
      "isDiscoverable": true,
      "isDynamic": false,
      "createdAt": "2024-01-15T10:30:00.000Z"
    },
    {
      "_id": "genre-rock",
      "name": "Rock",
      "slug": "rock",
      "posterImage": "/images/genre-rock.webp",
      "stationCount": 5234,
      "isDiscoverable": true,
      "isDynamic": false
    }
  ],
  "pagination": {
    "page": 1,
    "limit": 9,
    "total": 142,
    "pages": 16
  }
}
Samsung Tizen Example
// Samsung TV - Fetch genres with country filter
function fetchGenresByCountry(country) {
  const API_BASE = 'https://themegaradio.com';
  
  // Build filters object
  const filters = JSON.stringify({
    countrycode: country || 'all',
    searchQuery: ''
  });
  
  const url = `${API_BASE}/api/genres?tv=1&limit=20&filters=${encodeURIComponent(filters)}`;
  
  const request = new XMLHttpRequest();
  request.open('GET', url, true);
  
  request.onload = function() {
    if (request.status === 200) {
      const response = JSON.parse(request.responseText);
      console.log('‚úÖ Genres loaded:', response.data.length);
      
      // Display genres on TV screen
      displayGenres(response.data);
    } else {
      console.error('‚ùå Failed to load genres:', request.status);
    }
  };
  
  request.onerror = function() {
    console.error('‚ùå Network error loading genres');
  };
  
  request.send();
}
// Example: Fetch German genres
fetchGenresByCountry('Germany');
LG webOS Example
// LG TV - Fetch genres with pagination
function fetchGenresPage(pageNumber) {
  const API_BASE = 'https://themegaradio.com';
  const url = `${API_BASE}/api/genres?tv=1&page=${pageNumber}&limit=12`;
  
  const xhr = new XMLHttpRequest();
  xhr.open('GET', url, true);
  
  xhr.onreadystatechange = function() {
    if (xhr.readyState === 4) {
      if (xhr.status === 200) {
        const response = JSON.parse(xhr.responseText);
        console.log('üìö Genres page ' + pageNumber + ':', response.data.length);
        console.log('üìÑ Total pages:', response.pagination.pages);
        
        // Display on TV
        updateGenreGrid(response.data);
        updatePagination(response.pagination);
      }
    }
  };
  
  xhr.send();
}
// Start with page 1
fetchGenresPage(1);
2. Get Discoverable Genres
Fetch only the top genres marked for discovery/homepage display. Returns up to 13 most popular genres.

Endpoint
GET /api/genres/discoverable?tv=1
No Parameters Required
This endpoint automatically returns the top 13 discoverable genres sorted by station count.

Response Format
[
  {
    "_id": "genre-pop",
    "name": "Pop",
    "slug": "pop",
    "posterImage": "/images/genre-pop.webp",
    "discoverableImage": "/images/genre-pop-discover.webp",
    "description": "Popular music and stations worldwide",
    "stationCount": 8523,
    "isDiscoverable": true
  },
  {
    "_id": "genre-rock",
    "name": "Rock",
    "slug": "rock",
    "stationCount": 5234,
    "isDiscoverable": true
  }
]
Samsung Tizen Example
// Samsung TV - Fetch discoverable genres for homepage
function fetchDiscoverableGenres() {
  const API_BASE = 'https://themegaradio.com';
  const url = `${API_BASE}/api/genres/discoverable?tv=1`;
  
  const request = new XMLHttpRequest();
  request.open('GET', url, true);
  
  request.onload = function() {
    if (request.status === 200) {
      const genres = JSON.parse(request.responseText);
      console.log('üéØ Discoverable genres:', genres.length);
      
      // Create homepage genre grid
      createGenreHomeScreen(genres);
    }
  };
  
  request.send();
}
LG webOS Example
// LG TV - Fetch discoverable genres with image preloading
function loadDiscoverableGenres() {
  const API_BASE = 'https://themegaradio.com';
  const url = `${API_BASE}/api/genres/discoverable?tv=1`;
  
  const xhr = new XMLHttpRequest();
  xhr.open('GET', url, true);
  
  xhr.onload = function() {
    if (xhr.status === 200) {
      const genres = JSON.parse(xhr.responseText);
      console.log('üè† Homepage genres loaded:', genres.length);
      
      // Preload genre images for smooth display
      genres.forEach(function(genre) {
        const img = new Image();
        img.src = 'https://themegaradio.com' + genre.posterImage;
      });
      
      // Display on TV homepage
      renderGenreCarousel(genres);
    }
  };
  
  xhr.send();
}
3. Get Genre by Slug
Fetch detailed information about a specific genre using its URL-friendly slug.

Endpoint
GET /api/genres/slug/:slug?tv=1
URL Parameters
Parameter	Type	Required	Description
slug	string	YES	Genre slug (e.g., pop, rock, classical)
Example Slugs
pop - Pop music
rock - Rock music
classical - Classical music
jazz - Jazz music
electronic - Electronic/EDM
hip-hop - Hip-Hop/Rap
country - Country music
latin - Latin music
Response Format
{
  "_id": "genre-pop",
  "name": "Pop",
  "slug": "pop",
  "posterImage": "/images/genre-pop.webp",
  "discoverableImage": "/images/genre-pop-discover.webp",
  "description": "Popular music and stations from around the world",
  "stationCount": 8523,
  "total_stations": 8523,
  "isDiscoverable": true,
  "isDynamic": false,
  "createdAt": "2024-01-15T10:30:00.000Z"
}
Samsung Tizen Example
// Samsung TV - Fetch genre details
function fetchGenreDetails(genreSlug) {
  const API_BASE = 'https://themegaradio.com';
  const url = `${API_BASE}/api/genres/slug/${genreSlug}?tv=1`;
  
  const request = new XMLHttpRequest();
  request.open('GET', url, true);
  
  request.onload = function() {
    if (request.status === 200) {
      const genre = JSON.parse(request.responseText);
      console.log('üéµ Genre:', genre.name);
      console.log('üìä Stations:', genre.stationCount);
      
      // Display genre details on TV
      displayGenreHeader(genre);
      
      // Fetch stations for this genre
      fetchGenreStations(genreSlug);
    }
  };
  
  request.send();
}
// Example: Get Pop genre details
fetchGenreDetails('pop');
4. Get Stations by Genre
Fetch radio stations for a specific genre with pagination, country filtering, search, and sorting.

Endpoint
GET /api/genres/:slug/stations?tv=1
URL Parameters
Parameter	Type	Required	Description
slug	string	YES	Genre slug (e.g., pop, rock)
Query Parameters
Parameter	Type	Required	Default	Description
tv	number	YES	-	Must be 1 to disable compression
page	number	No	1	Page number for pagination
limit	number	No	12	Stations per page
country	string	No	all	Filter by country name
search	string	No	-	Search term for filtering
sort	string	No	createdAt	Sort by: quality, popularity, name, country, createdAt
Response Format
{
  "stations": [
    {
      "_id": "68a8c47dbd66579311ab228c",
      "stationuuid": "9608c5f8-0601-11e8-ae97-52543be04c81",
      "name": "MANGORADIO",
      "url": "https://eu10.fastcast4u.com:2199/tunein/djmango.pls",
      "url_resolved": "https://eu10.fastcast4u.com:2199/tunein/djmango.pls",
      "homepage": "https://mangoradio.de",
      "favicon": "https://mangoradio.de/wp-content/uploads/2024/02/cropped-Favicon-192x192.png",
      "tags": "pop,schlager,top 40,deutsch",
      "country": "Germany",
      "countrycode": "DE",
      "state": "Rheinland-Pfalz",
      "language": "german",
      "votes": 94857,
      "codec": "MP3",
      "bitrate": 192,
      "clickcount": 1234567,
      "genre": "Pop"
    }
  ],
  "pagination": {
    "page": 1,
    "limit": 12,
    "total": 8523,
    "pages": 711
  }
}
Samsung Tizen Example - Basic Fetch
// Samsung TV - Fetch stations for genre
function fetchGenreStations(genreSlug, page) {
  const API_BASE = 'https://themegaradio.com';
  const url = `${API_BASE}/api/genres/${genreSlug}/stations?tv=1&page=${page || 1}&limit=20`;
  
  const request = new XMLHttpRequest();
  request.open('GET', url, true);
  
  request.onload = function() {
    if (request.status === 200) {
      const response = JSON.parse(request.responseText);
      console.log('üéµ Stations loaded:', response.stations.length);
      console.log('üìÑ Page ' + response.pagination.page + ' of ' + response.pagination.pages);
      
      // Display stations on TV grid
      displayStationGrid(response.stations);
      updatePageIndicator(response.pagination);
    }
  };
  
  request.send();
}
// Example: Fetch Pop stations
fetchGenreStations('pop', 1);
Samsung Tizen Example - With Country Filter
// Samsung TV - Fetch genre stations filtered by country
function fetchGenreStationsByCountry(genreSlug, country, page) {
  const API_BASE = 'https://themegaradio.com';
  
  // Build URL with country filter
  let url = `${API_BASE}/api/genres/${genreSlug}/stations?tv=1&page=${page || 1}&limit=20`;
  
  if (country && country !== 'all') {
    url += `&country=${encodeURIComponent(country)}`;
  }
  
  console.log('üåç Fetching ' + genreSlug + ' stations from ' + (country || 'all countries'));
  
  const request = new XMLHttpRequest();
  request.open('GET', url, true);
  
  request.onload = function() {
    if (request.status === 200) {
      const response = JSON.parse(request.responseText);
      console.log('‚úÖ Found ' + response.stations.length + ' stations');
      console.log('üìä Total: ' + response.pagination.total + ' stations');
      
      // Display filtered stations
      displayStationList(response.stations, genreSlug, country);
    }
  };
  
  request.send();
}
// Example: Fetch German Pop stations
fetchGenreStationsByCountry('pop', 'Germany', 1);
// Example: Fetch American Jazz stations
fetchGenreStationsByCountry('jazz', 'United States', 1);
LG webOS Example - With Sorting
// LG TV - Fetch genre stations with sorting options
function fetchGenreStationsSorted(genreSlug, sortBy, page) {
  const API_BASE = 'https://themegaradio.com';
  
  // Sort options: quality, popularity, name, country, createdAt
  const url = `${API_BASE}/api/genres/${genreSlug}/stations?tv=1&page=${page || 1}&limit=15&sort=${sortBy}`;
  
  const xhr = new XMLHttpRequest();
  xhr.open('GET', url, true);
  
  xhr.onload = function() {
    if (xhr.status === 200) {
      const response = JSON.parse(xhr.responseText);
      console.log('üéµ Loaded ' + response.stations.length + ' stations');
      console.log('üìä Sorted by: ' + sortBy);
      
      // Display sorted stations
      renderStationGrid(response.stations);
      showSortIndicator(sortBy);
    }
  };
  
  xhr.send();
}
// Example: Fetch highest quality rock stations
fetchGenreStationsSorted('rock', 'quality', 1);
// Example: Fetch most popular pop stations
fetchGenreStationsSorted('pop', 'popularity', 1);
LG webOS Example - With Search
// LG TV - Search within genre
function searchGenreStations(genreSlug, searchTerm) {
  const API_BASE = 'https://themegaradio.com';
  const url = `${API_BASE}/api/genres/${genreSlug}/stations?tv=1&search=${encodeURIComponent(searchTerm)}&limit=20`;
  
  const xhr = new XMLHttpRequest();
  xhr.open('GET', url, true);
  
  xhr.onload = function() {
    if (xhr.status === 200) {
      const response = JSON.parse(xhr.responseText);
      console.log('üîç Search results: ' + response.stations.length + ' stations');
      
      // Display search results
      displaySearchResults(response.stations, searchTerm);
    }
  };
  
  xhr.send();
}
// Example: Search for "BBC" in news genre
searchGenreStations('news', 'BBC');
5. Get Genre Statistics
Fetch statistics for a genre including top countries and related genres.

Endpoint
GET /api/genres/:slug/stats?tv=1
URL Parameters
Parameter	Type	Required	Description
slug	string	YES	Genre slug (e.g., pop, rock)
Response Format
{
  "topCountries": [
    {
      "_id": null,
      "name": "United States",
      "count": 2345,
      "avgVotes": 1234.5
    },
    {
      "name": "Germany",
      "count": 1876,
      "avgVotes": 987.2
    }
  ],
  "relatedGenres": [
    {
      "_id": null,
      "name": "Top 40",
      "slug": "top-40",
      "count": 543
    },
    {
      "name": "Dance",
      "slug": "dance",
      "count": 432
    }
  ]
}
Samsung Tizen Example
// Samsung TV - Fetch genre statistics
function fetchGenreStats(genreSlug) {
  const API_BASE = 'https://themegaradio.com';
  const url = `${API_BASE}/api/genres/${genreSlug}/stats?tv=1`;
  
  const request = new XMLHttpRequest();
  request.open('GET', url, true);
  
  request.onload = function() {
    if (request.status === 200) {
      const stats = JSON.parse(request.responseText);
      console.log('üìä Top countries:', stats.topCountries.length);
      console.log('üéµ Related genres:', stats.relatedGenres.length);
      
      // Display top countries
      displayTopCountries(stats.topCountries);
      
      // Display related genres
      displayRelatedGenres(stats.relatedGenres);
    }
  };
  
  request.send();
}
// Example: Get Pop genre statistics
fetchGenreStats('pop');
6. Complete Smart TV Example
Here's a complete genre browsing system for Smart TVs:

Samsung Tizen - Complete Genre Browser
/**
 * Complete Genre Browser for Samsung Tizen Smart TV
 * Handles genre listing, country filtering, and station playback
 */
var GenreBrowser = {
  API_BASE: 'https://themegaradio.com',
  currentGenre: null,
  currentCountry: 'all',
  currentPage: 1,
  
  // Initialize genre browser
  init: function() {
    console.log('üé¨ Initializing Genre Browser...');
    this.loadDiscoverableGenres();
    this.setupRemoteControl();
  },
  
  // Load discoverable genres for homepage
  loadDiscoverableGenres: function() {
    var self = this;
    var url = this.API_BASE + '/api/genres/discoverable?tv=1';
    
    var request = new XMLHttpRequest();
    request.open('GET', url, true);
    
    request.onload = function() {
      if (request.status === 200) {
        var genres = JSON.parse(request.responseText);
        console.log('‚úÖ Loaded ' + genres.length + ' discoverable genres');
        self.displayGenreGrid(genres);
      }
    };
    
    request.onerror = function() {
      console.error('‚ùå Failed to load genres');
      self.showError('Failed to load genres. Please check your internet connection.');
    };
    
    request.send();
  },
  
  // Display genre grid on TV screen
  displayGenreGrid: function(genres) {
    var gridHTML = '<div class="genre-grid">';
    
    for (var i = 0; i < genres.length; i++) {
      var genre = genres[i];
      gridHTML += '<div class="genre-card" data-slug="' + genre.slug + '">' +
                  '<img src="' + this.API_BASE + genre.posterImage + '" alt="' + genre.name + '">' +
                  '<h3>' + genre.name + '</h3>' +
                  '<p>' + genre.stationCount + ' stations</p>' +
                  '</div>';
    }
    
    gridHTML += '</div>';
    document.getElementById('genre-container').innerHTML = gridHTML;
    
    // Focus first genre
    this.focusGenre(0);
  },
  
  // Load stations for selected genre
  loadGenreStations: function(genreSlug, country, page) {
    var self = this;
    var url = this.API_BASE + '/api/genres/' + genreSlug + '/stations?tv=1&page=' + (page || 1) + '&limit=20';
    
    if (country && country !== 'all') {
      url += '&country=' + encodeURIComponent(country);
    }
    
    console.log('üéµ Loading ' + genreSlug + ' stations from ' + (country || 'all countries'));
    
    var request = new XMLHttpRequest();
    request.open('GET', url, true);
    
    request.onload = function() {
      if (request.status === 200) {
        var response = JSON.parse(request.responseText);
        console.log('‚úÖ Loaded ' + response.stations.length + ' stations');
        
        self.currentGenre = genreSlug;
        self.currentCountry = country || 'all';
        self.currentPage = page || 1;
        
        self.displayStationList(response.stations, response.pagination);
      }
    };
    
    request.send();
  },
  
  // Display station list
  displayStationList: function(stations, pagination) {
    var listHTML = '<div class="station-list">';
    listHTML += '<h2>' + this.currentGenre.toUpperCase() + ' Stations</h2>';
    listHTML += '<p>Page ' + pagination.page + ' of ' + pagination.pages + ' (' + pagination.total + ' total)</p>';
    
    for (var i = 0; i < stations.length; i++) {
      var station = stations[i];
      listHTML += '<div class="station-item" data-station-id="' + station._id + '">' +
                  '<img src="' + (station.favicon || '/images/no-image.webp') + '" alt="' + station.name + '">' +
                  '<div class="station-info">' +
                  '<h3>' + station.name + '</h3>' +
                  '<p>' + station.country + ' ‚Ä¢ ' + station.codec + ' ' + station.bitrate + 'kbps</p>' +
                  '<p>‚ù§Ô∏è ' + station.votes + ' votes</p>' +
                  '</div>' +
                  '</div>';
    }
    
    listHTML += '</div>';
    document.getElementById('station-container').innerHTML = listHTML;
    
    // Focus first station
    this.focusStation(0);
  },
  
  // Setup remote control navigation
  setupRemoteControl: function() {
    var self = this;
    
    document.addEventListener('keydown', function(event) {
      switch(event.keyCode) {
        case 37: // LEFT
          self.navigateLeft();
          break;
        case 38: // UP
          self.navigateUp();
          break;
        case 39: // RIGHT
          self.navigateRight();
          break;
        case 40: // DOWN
          self.navigateDown();
          break;
        case 13: // ENTER/OK
          self.selectCurrentItem();
          break;
        case 10009: // RETURN/BACK
          self.goBack();
          break;
      }
    });
  },
  
  // Select genre or station
  selectCurrentItem: function() {
    var focused = document.querySelector('.focused');
    if (!focused) return;
    
    if (focused.classList.contains('genre-card')) {
      var genreSlug = focused.getAttribute('data-slug');
      this.loadGenreStations(genreSlug, 'all', 1);
    } else if (focused.classList.contains('station-item')) {
      var stationId = focused.getAttribute('data-station-id');
      this.playStation(stationId);
    }
  },
  
  // Play selected station
  playStation: function(stationId) {
    console.log('‚ñ∂Ô∏è Playing station: ' + stationId);
    // Implement audio playback (see SAMSUNG_TV_API_GUIDE.md for audio player)
  },
  
  // Show error message
  showError: function(message) {
    document.getElementById('error-message').textContent = message;
    document.getElementById('error-overlay').style.display = 'block';
  },
  
  // Navigation helpers
  navigateLeft: function() { /* Implementation */ },
  navigateRight: function() { /* Implementation */ },
  navigateUp: function() { /* Implementation */ },
  navigateDown: function() { /* Implementation */ },
  focusGenre: function(index) { /* Implementation */ },
  focusStation: function(index) { /* Implementation */ },
  goBack: function() { /* Implementation */ }
};
// Initialize when DOM is ready
document.addEventListener('DOMContentLoaded', function() {
  GenreBrowser.init();
});
üìã Common Genre Slugs
Here are the most popular genre slugs for quick reference:

Music Genres
pop - Pop music
rock - Rock music
classical - Classical music
jazz - Jazz music
electronic - Electronic/EDM
hip-hop - Hip-Hop/Rap
country - Country music
latin - Latin music
dance - Dance music
metal - Heavy metal
blues - Blues music
reggae - Reggae music
folk - Folk music
r-b - R&B/Soul
Content Types
news - News radio
talk - Talk radio
sports - Sports radio
religious - Religious content
educational - Educational content
üéØ Typical User Flow
1. Homepage - Browse Genres
// Load discoverable genres
GET /api/genres/discoverable?tv=1
// Display genre grid with poster images
2. Select Genre - View Stations
// User selects "Pop" genre
GET /api/genres/pop/stations?tv=1&page=1&limit=20
// Display station list
3. Filter by Country
// User selects "Germany" filter
GET /api/genres/pop/stations?tv=1&page=1&limit=20&country=Germany
// Display filtered stations
4. Change Sort Order
// User wants highest quality stations
GET /api/genres/pop/stations?tv=1&page=1&limit=20&country=Germany&sort=quality
// Display sorted stations
5. Navigate Pages
// User presses "Next Page"
GET /api/genres/pop/stations?tv=1&page=2&limit=20&country=Germany&sort=quality
// Display next page
‚ö° Performance Tips
1. Cache Genre Lists
var genreCache = {
  data: null,
  timestamp: 0,
  TTL: 300000 // 5 minutes
};
function getCachedGenres() {
  if (genreCache.data && (Date.now() - genreCache.timestamp) < genreCache.TTL) {
    console.log('üì¶ Using cached genres');
    return genreCache.data;
  }
  return null;
}
2. Preload Next Page
// Preload next page in background
function preloadNextPage(genreSlug, currentPage, country) {
  var nextPage = currentPage + 1;
  var url = API_BASE + '/api/genres/' + genreSlug + '/stations?tv=1&page=' + nextPage;
  
  if (country && country !== 'all') {
    url += '&country=' + encodeURIComponent(country);
  }
  
  // Load in background
  var xhr = new XMLHttpRequest();
  xhr.open('GET', url, true);
  xhr.send();
}
3. Image Lazy Loading
// Only load images for visible items
function lazyLoadImages() {
  var images = document.querySelectorAll('img[data-src]');
  
  for (var i = 0; i < images.length; i++) {
    var rect = images[i].getBoundingClientRect();
    
    if (rect.top < window.innerHeight && rect.bottom > 0) {
      images[i].src = images[i].getAttribute('data-src');
      images[i].removeAttribute('data-src');
    }
  }
}
üêõ Error Handling
Network Errors
request.onerror = function() {
  console.error('‚ùå Network error');
  showErrorMessage('Network connection failed. Please check your internet connection.');
};
HTTP Errors
request.onload = function() {
  if (request.status !== 200) {
    console.error('‚ùå HTTP error:', request.status);
    showErrorMessage('Failed to load data. Error code: ' + request.status);
  }
};
Empty Results
if (response.stations.length === 0) {
  console.log('‚ö†Ô∏è No stations found');
  showEmptyState('No stations found for this genre and country combination.');
}
üìù Summary
Essential Endpoints
Get Discoverable Genres: /api/genres/discoverable?tv=1
Get Genre Stations: /api/genres/:slug/stations?tv=1&country=Germany&page=1
Get Genre Stats: /api/genres/:slug/stats?tv=1
Key Features
‚úÖ Country filtering for localized content
‚úÖ Pagination for large station lists
‚úÖ Multiple sort options (quality, popularity, name)
‚úÖ Search within genres
‚úÖ Related genres for discovery
‚úÖ Top countries for each genre
Remember
ALWAYS include ?tv=1 parameter
Use XMLHttpRequest (not fetch API)
Handle errors gracefully
Cache when appropriate
Preload images for smooth UI