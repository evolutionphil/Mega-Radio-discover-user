📺 Episode TMDB ID Extraction - Complete Flow
🔄 Episode TMDB ID Extraction Process
┌─────────────────┐    ┌──────────────────┐    ┌─────────────────────┐
│  get_series_info│────│ Episodes Response│────│ Episode Selection   │
│  API Call       │    │ Processing       │    │ & TMDB Storage      │
└─────────────────┘    └──────────────────┘    └─────────────────────┘
         │                       │                        │
         ▼                       ▼                        ▼
┌─────────────────┐    ┌──────────────────┐    ┌─────────────────────┐
│ Episode Objects │────│ Season Structure │────│ Player Initialization│
│ with TMDB IDs   │    │ Organization     │    │ with Episode TMDB   │
└─────────────────┘    └──────────────────┘    └─────────────────────┘
📡 1. API Response Structure
get_series_info API Response:
// From series_summary.js (line 81)
$.getJSON(api_host_url + '/player_api.php?username=' + user_name + 
          '&password=' + password + 
          '&action=get_series_info&series_id=' + current_series.series_id)
Complete API Response Example:
{
    "info": {
        "tmdb_id": "71912",           // Series TMDB ID
        "name": "The Witcher",
        "plot": "Geralt of Rivia...",
        "genre": "Action & Adventure"
    },
    "seasons": [
        {
            "season_number": 1,
            "name": "Season 1"
        },
        {
            "season_number": 2, 
            "name": "Season 2"
        }
    ],
    "episodes": {
        "1": [                        // Season 1 episodes array
            {
                "id": "123456",       // Episode stream ID
                "title": "The End's Beginning",
                "container_extension": "mkv",
                "info": {
                    "tmdb_id": "1588705",    // Episode-specific TMDB ID
                    "plot": "Geralt fights a kikimore...",
                    "releasedate": "2019-12-20",
                    "movie_image": "https://image.tmdb.org/..."
                }
            },
            {
                "id": "123457",
                "title": "Four Marks", 
                "container_extension": "mkv",
                "info": {
                    "tmdb_id": "1588706",    // Different episode TMDB ID
                    "plot": "Geralt's destiny...",
                    "releasedate": "2019-12-20"
                }
            }
        ],
        "2": [                        // Season 2 episodes array
            {
                "id": "234567",
                "title": "A Grain of Truth",
                "container_extension": "mkv", 
                "info": {
                    "tmdb_id": "2916796",    // Season 2 episode TMDB ID
                    "plot": "Geralt faces a dangerous...",
                    "releasedate": "2021-12-17"
                }
            }
        ]
    }
}
🏗️ 2. Episodes Data Processing
Episode Structure Organization:
// From series_summary.js (lines 102-134)
.done(function(response) {
    current_series.info = response.info;
    
    // Extract series TMDB ID
    if(response.info && response.info.tmdb_id) {
        current_series.tmdb_id = response.info.tmdb_id;
        console.log('✅ SERIES TMDB ID extracted:', current_series.tmdb_id);
    }
    
    var seasons = response.seasons;
    var episodes = response.episodes;  // Episodes grouped by season number
    
    // Process episodes into season structure
    if(response.episodes && seasons && seasons.length > 0) {
        // Map episodes to their respective seasons
        seasons.map(function(item) {
            // Each season gets its episodes array
            item.episodes = episodes[item.season_number.toString()];
        });
    } else {
        // No seasons data - create seasons from episode keys
        seasons = [];
        Object.keys(episodes).map(function(key, index) {
            seasons.push({
                name: "Season " + (index + 1),
                cover: "images/404.png",
                episodes: episodes[key]  // Each episode has info.tmdb_id
            });
        });
    }
    
    // Store processed seasons with episodes containing TMDB IDs
    current_series.seasons = seasons;
})
Episode Data Structure After Processing:
current_series.seasons = [
    {
        name: "Season 1",
        episodes: [
            {
                id: "123456",
                title: "The End's Beginning",
                info: {
                    tmdb_id: "1588705",  // Individual episode TMDB ID
                    plot: "Geralt fights...",
                    movie_image: "..."
                }
            },
            {
                id: "123457", 
                title: "Four Marks",
                info: {
                    tmdb_id: "1588706",  // Different episode TMDB ID
                    plot: "Geralt's destiny..."
                }
            }
        ]
    },
    {
        name: "Season 2",
        episodes: [
            {
                id: "234567",
                title: "A Grain of Truth", 
                info: {
                    tmdb_id: "2916796",  // Season 2 episode TMDB ID
                    plot: "Geralt faces..."
                }
            }
        ]
    }
]
🎯 3. Episode Selection & TMDB Transfer
Episode Selection Process:
// From episode_variable.js (lines 21-23)
showMovie: function(index) {
    var episodes = current_season.episodes;  // Get current season's episodes
    current_episode = episodes[index];       // Select specific episode
    
    // Initialize player with selected episode (containing TMDB ID)
    vod_series_player_page.init(current_episode, 'series', "episode-page", '');
}
Player Initialization with Episode Data:
// From vod_series_player.js (line 135)
init: function(movie, movie_type, back_url, movie_url) {
    this.current_movie = movie;  // movie = selected episode with info.tmdb_id
    
    // movie structure:
    // {
    //     id: "123456",
    //     title: "The End's Beginning", 
    //     info: {
    //         tmdb_id: "1588705",  // Episode-specific TMDB ID
    //         plot: "...",
    //         movie_image: "..."
    //     }
    // }
}
🎬 4. TMDB ID Usage in Subtitle Requests
Episode TMDB ID Access:
// From vod_series_player.js (lines 824-827)
else {
    // SERIES EPISODES: Enhanced logic with episode name parsing fallback
    
    subtitle_request_data = {
        movie_type: 'episode'
    };
    
    // PRIMARY: Use episode TMDB ID from this.current_movie.info.tmdb_id
    if(this.current_movie && this.current_movie.info && this.current_movie.info.tmdb_id) {
        subtitle_request_data.tmdb_id = String(this.current_movie.info.tmdb_id);
        console.log('✅ Using episode TMDB ID:', this.current_movie.info.tmdb_id);
    } else {
        console.log('⚠️ No episode TMDB ID - using fallback parsing');
        // FALLBACK: Parse episode name for series info
        var parsed_episode = this.parseEpisodeName(episode_name);
        // ... fallback logic
    }
}
Subtitle Request with Episode TMDB ID:
// Example subtitle request
$.ajax({
    method: 'post',
    url: 'https://exoapp.tv/api/get-subtitles',
    data: {
        movie_type: 'episode',
        tmdb_id: '1588705'  // Episode-specific TMDB ID from API
    },
    dataType: 'json',
    success: function(result) {
        // Handle subtitle response
    }
});
📊 5. TMDB ID Hierarchy Example
Complete TMDB ID Structure:
The Witcher (Series)
├── Series TMDB ID: "71912"
├── Season 1
│   ├── Episode 1: "The End's Beginning"
│   │   └── Episode TMDB ID: "1588705"
│   ├── Episode 2: "Four Marks"
│   │   └── Episode TMDB ID: "1588706"  
│   └── Episode 3: "Betrayer Moon"
│       └── Episode TMDB ID: "1588707"
├── Season 2
│   ├── Episode 1: "A Grain of Truth"
│   │   └── Episode TMDB ID: "2916796"
│   └── Episode 2: "Kaer Morhen"
│       └── Episode TMDB ID: "2916797"
Data Flow Timeline:
Series Page: get_series_info API called
API Response: Contains episodes with individual info.tmdb_id
Data Processing: Episodes organized into seasons structure
Episode Selection: User clicks episode → current_episode = episodes[index]
Player Init: Episode object passed as movie parameter
Subtitle Request: this.current_movie.info.tmdb_id used for precise matching
🎯 6. Key Benefits
Episode-Specific TMDB IDs Provide:
✅ Precise Subtitle Matching: Each episode has unique TMDB identifier
✅ Accurate Metadata: Episode-specific plots, images, release dates
✅ Better Fallback: Series TMDB ID available if episode ID missing
✅ Database Consistency: Matches The Movie Database structure exactly
Request Priority:
1. Episode TMDB ID (most precise)
   ↓
2. Series TMDB ID + parsed episode info
   ↓  
3. Name parsing fallback (least precise)
This system ensures maximum subtitle accuracy by using the most specific TMDB identifier available for each individual episode! 🎯