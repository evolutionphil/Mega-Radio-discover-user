🏗️ System Architecture Overview
┌─────────────────┐    ┌──────────────────┐    ┌─────────────────────┐
│ Sort Settings   │────│  Sort Function   │────│   UI Components     │
│ (Persistent)    │    │  (Core Logic)    │    │  (Modal & Button)   │
└─────────────────┘    └──────────────────┘    └─────────────────────┘
         │                       │                        │
         ▼                       ▼                        ▼
┌─────────────────┐    ┌──────────────────┐    ┌─────────────────────┐
│ Content Models  │────│ Category Display │────│   User Interaction  │
│ VOD & Series    │    │ with Sorting     │    │   Sort Selection    │
└─────────────────┘    └──────────────────┘    └─────────────────────┘
⚙️ 1. Settings Configuration
Sort Settings Structure:
// From settings.js (lines 5-16)
var settings = {
    playlist_id: 0,
    playlist: {},
    vod_sort: "added",        // Default sort for movies
    series_sort: "added",     // Default sort for series  
    live_sort: "added",       // Default sort for live TV
    sort_keys: {              // Available sort options
        added: 'Added',
        number: 'Number',
        rating: 'Rating',
        'a_z': 'A-Z',
        'z_a': 'Z-A',
        name: 'Name',
        default: 'Default'
    },
    // ... other settings
};
Persistent Storage Management:
// From settings.js (lines 37-46)
initFromLocal: function() {
    var keys = [
        'terms_accepted', 'vod_sort', 'series_sort', 'buffer_size', 
        'time_format', 'live_sort', 'element_color', 'focus_color', 
        'epg_txt_color', 'lock_state', 'bg_focus_color', 'mac_address'
    ];
    
    var that = this;
    keys.map(function(key) {
        var temp = localStorage.getItem(storage_id + key);
        if(temp) {
            that[key] = temp;  // Restore saved sort preferences
        }
    });
},
// Save sort preference when changed
saveSettings: function(key, value, type) {
    this[key] = value;
    if(type === 'object' || type === 'array') {
        value = JSON.stringify(value);
    }
    localStorage.setItem(storage_id + key, value);
}
🎯 2. Core Sorting Function
Main Sorting Logic:
// From common.js (lines 505-544)
function getSortedMovies(movies, key) {
    var new_movies = [];
    var new_key = key;
    
    // Map sort keys to data properties
    if (key === "a_z" || key === "z_a") new_key = "name";
    if (key === "number") new_key = "num";
    
    // Return unchanged if no movies or property doesn't exist
    if (movies.length == 0) return movies;
    if (typeof movies[0][new_key] == "undefined") {
        return movies;
    }
    
    var direction = 1;
    
    switch (key) {
        case "rating":
        case "number": 
        case "added":
            // Numeric sorting (rating, number, added date)
            direction = 1;
            if (key === "number") direction = -1;  // Numbers: high to low
            
            new_movies = movies.sort(function(a, b) {
                var a_new_key = parseFloat(a[new_key]);
                if (isNaN(a_new_key)) a_new_key = 0;
                var b_new_key = parseFloat(b[new_key]);
                if (isNaN(b_new_key)) b_new_key = 0;
                
                return direction * (a_new_key < b_new_key ? 1 : 
                                   a_new_key > b_new_key ? -1 : 0);
            });
            break;
            
        case "a_z":
        case "z_a":
        case "name":
            // Alphabetical sorting
            direction = key === "a_z" || key === "name" ? 1 : -1;
            
            new_movies = movies.sort(function(a, b) {
                return direction * a[new_key].localeCompare(b[new_key]);
            });
            break;
            
        case "default":
            // No sorting - return original order
            return movies;
    }
    
    return new_movies;
}
Sort Key Mapping:
User Option	Internal Key	Data Property	Direction	Description
"default"	"default"	none	none	Original order
"added"	"added"	"added"	Ascending	Recently added first
"rating"	"rating"	"rating"	Ascending	Highest rating first
"number"	"number"	"num"	Descending	Highest number first
"a_z"	"name"	"name"	Ascending	A to Z alphabetical
"z_a"	"name"	"name"	Descending	Z to A alphabetical
🎬 3. Content Integration
Category Content Loading with Sorting:
// From vod_series_page.js (lines 104-139)
showCategoryContent: function() {
    var keys = this.keys;
    var category = this.categories[keys.category_selection];
    
    // Clear previous content
    this.current_render_count = 0;
    $('#vod-series-menus-container').html('');
    $('#vod-series-search-input').val('');
    
    var movies = [];
    var sort_key = settings[this.current_movie_type + '_sort'];  // Get current sort
    
    if(category.category_id === 'all') {
        // "All" category: combine all non-adult categories
        var current_model = this.current_movie_type === 'vod' ? VodModel : SeriesModel;
        var categories = current_model.getCategories(false, false);
        
        categories.map(function(item) {
            if(!checkForAdult(item, 'category', [])) {
                movies = movies.concat(item.movies);
            }
        });
    } else {
        // Regular category: use category movies
        movies = category.movies.filter(function(item) {
            return true;  // Could add additional filters here
        });
    }
    
    // **APPLY SORTING**: This is where sorting happens
    this.movies = getSortedMovies(movies, sort_key);
    
    // Update UI with sorted content
    this.renderCategoryContent();
    $('#vod-series-menus-container').scrollTop(0);
    keys.menu_selection = 0;
    this.current_category_index = keys.category_selection;
    $('#vod-series-current-category').text(category.category_name);
    
    // Update sort button title
    this.sort_doms.map(function(index, item) {
        var sort_key1 = $(item).data('sort_key');
        if(sort_key === sort_key1) {
            keys.sort_selection = index;
        }
    });
    $('#sort-btn-title').text($(this.sort_doms[keys.sort_selection]).text());
}
🎨 4. UI Components
Sort Modal HTML Structure:
<!-- Sort Modal Container (from index.html lines 1831-1869) -->
<div id="sort-modal-container" onmouseleave="vod_series_page.closeSortModal()">
    
    <!-- Default Sort Option -->
    <div class="sort-modal-item bg-focus"
         data-word_code="default" 
         data-sort_key="default"
         onmouseenter="vod_series_page.hoverSortItem(0)"
         onclick="vod_series_page.handleMenuClick()">
        Default
    </div>
    
    <!-- Added Date Sort -->
    <div class="sort-modal-item bg-focus"
         data-word_code="added" 
         data-sort_key="added"
         onmouseenter="vod_series_page.hoverSortItem(1)"
         onclick="vod_series_page.handleMenuClick()">
        Added
    </div>
    
    <!-- A to Z Sort -->
    <div class="sort-modal-item bg-focus"
         data-word_code="a_z" 
         data-sort_key="a_z"
         onmouseenter="vod_series_page.hoverSortItem(2)"
         onclick="vod_series_page.handleMenuClick()">
        A-Z
    </div>
    
    <!-- Z to A Sort -->
    <div class="sort-modal-item bg-focus"
         data-word_code="z_a" 
         data-sort_key="z_a"
         onmouseenter="vod_series_page.hoverSortItem(3)"
         onclick="vod_series_page.handleMenuClick()">
        Z-A
    </div>
    
    <!-- Rating Sort -->
    <div class="sort-modal-item bg-focus"
         data-word_code="rating" 
         data-sort_key="rating"
         onmouseenter="vod_series_page.hoverSortItem(4)"
         onclick="vod_series_page.handleMenuClick()">
        Rating
    </div>
</div>
Sort Modal CSS Styling:
/* From vod_series.css (lines 167-188) */
#sort-modal-container {
    position: fixed;
    right: 370px;           /* Position on right side */
    top: 70px;             /* Below top menu */
    background: #555;       /* Dark background */
    display: none;         /* Hidden by default */
}
.sort-modal-item {
    transition: all 0.1s;
    font-size: 25px;
    background-color: #222; /* Dark item background */
    color: #ddd;           /* Light text */
    text-align: center;
    padding: 10px 100px;   /* Generous padding */
    margin-bottom: 2px;    /* Small gap between items */
}
.sort-modal-item:last-child {
    margin-bottom: 0;      /* No margin on last item */
}
.sort-modal-item.active {
    color: #fff;           /* Bright text when active */
}
🎮 5. User Interaction Logic
Sort Selection Handler:
// From vod_series_page.js (lines 388-399)
case "sort_selection":
    var category = this.categories[keys.category_selection];
    
    // Force content refresh by resetting category index
    this.current_category_index = -1;
    
    // Get selected sort key from DOM element
    var sort_key = $(this.sort_doms[keys.sort_selection]).data('sort_key');
    
    // **SAVE SORT PREFERENCE**: Persist to localStorage
    settings.saveSettings(this.current_movie_type + '_sort', sort_key, '');
    
    // Update sort button title
    $('#sort-btn-title').data('word_code', sort_key);
    $('#sort-btn-title').text(current_words[sort_key] ? 
                              current_words[sort_key] : 
                              settings.sort_keys[sort_key]);
    
    // **REFRESH CONTENT**: Apply new sorting
    this.showCategoryContent();
    
    // Close sort modal
    this.goBack();
    break;
Sort Modal Controls:
// From vod_series_page.js
// Open sort modal
showSortModal: function() {
    $('#sort-modal-container').show();
    this.keys.focused_part = 'sort_selection';
    this.hoverSortItem(this.keys.sort_selection);
},
// Close sort modal  
closeSortModal: function() {
    $('#sort-modal-container').hide();
    this.hoverTopMenu(0);
},
// Handle sort item hover
hoverSortItem: function(index) {
    this.keys.sort_selection = index;
    $('.sort-modal-item').removeClass('active');
    $(this.sort_doms[index]).addClass('active');
    this.prev_dom = this.sort_doms[index];
}
🔄 6. Complete Workflow Example
User Selects "Rating" Sort:
User Action: Clicks sort button → modal opens
Modal Display: Shows 5 sort options (Default, Added, A-Z, Z-A, Rating)
Selection: User hovers/clicks "Rating" option
Data Processing:
var sort_key = "rating";
settings.saveSettings('vod_sort', 'rating', '');  // Save to localStorage
Content Refresh:
this.movies = getSortedMovies(movies, 'rating');  // Sort by rating
this.renderCategoryContent();                     // Redraw UI
UI Update: Movies now displayed highest rating first
Persistence: Setting saved for next session
Sorting Algorithm Example:
// For movies with ratings: [7.2, 9.1, 6.8, 8.5, 7.9]
// After getSortedMovies(movies, 'rating'):
// Result: [9.1, 8.5, 7.9, 7.2, 6.8] (highest first)
// For A-Z sort with names: ["Zombieland", "Avatar", "Matrix"]  
// After getSortedMovies(movies, 'a_z'):
// Result: ["Avatar", "Matrix", "Zombieland"] (alphabetical)
📊 7. Integration Points for Reuse
Key Components to Copy:
Settings Management (settings.js):

Sort preference storage
Default values
Persistence logic
Core Sort Function (common.js):

getSortedMovies() function
Sort key mapping
Direction handling
UI Components (index.html + vod_series.css):

Sort modal HTML structure
CSS styling for modal and items
Responsive design
Controller Logic (vod_series_page.js):

Modal open/close
Selection handling
Content refresh logic
Customization Options:
Add new sort options to sort_keys object
Modify sort directions in getSortedMovies()
Change modal positioning via CSS
Add custom sort algorithms for specific data types
This complete sorting system provides a professional, persistent, and user-friendly way to organize content that you can easily adapt for any application! 🎯