📺 Complete Subtitle Workflow Documentation
🏗️ Architecture Overview
The subtitle system uses a hybrid approach that works seamlessly across Samsung Tizen and LG webOS platforms with two subtitle sources:

API Subtitles (Primary) - Fetched from exoapp.tv with enhanced episode matching
Native Subtitles (Fallback) - Built-in TV subtitles from streams
🔄 Complete Workflow
┌─────────────────┐    ┌──────────────────┐    ┌─────────────────┐
│   User Selects  │────│  Platform Check  │────│ Subtitle Source │
│   Subtitle      │    │ Samsung vs LG    │    │ API vs Native   │
└─────────────────┘    └──────────────────┘    └─────────────────┘
                                │                        │
                                ▼                        ▼
                    ┌──────────────────┐    ┌─────────────────────┐
                    │ Subtitle Fetcher │────│   SRT Parser +      │
                    │ (API Request)    │    │   Display Engine    │
                    └──────────────────┘    └─────────────────────┘
                                │                        │
                                ▼                        ▼
                    ┌──────────────────┐    ┌─────────────────────┐
                    │ Platform Player  │────│   Video Timeline    │
                    │ Samsung | LG     │    │   Synchronization   │
                    └──────────────────┘    └─────────────────────┘
🎯 1. Platform Detection & Initialization
Platform Detection Code:
// Platform Detection (from main.js)
var platform = 'lg'; // Default to LG
if (navigator.userAgent.indexOf('Tizen') > -1) {
    platform = 'samsung';
} else if (navigator.userAgent.indexOf('webOS') > -1) {
    platform = 'lg';
}
// Initialize appropriate player
function initPlayer() {
    if(platform === 'samsung'){
        media_player = {
            // Samsung Tizen implementation
            videoObj: null,
            subtitles: [],
            setSubtitleOrAudioTrack: function(kind, index) {
                try {
                    if(kind === "TEXT") {
                        webapis.avplay.setSubtitle(index);
                    }
                } catch(e) {
                    console.error('Samsung subtitle error:', e);
                }
            },
            getSubtitleOrAudioTrack: function(kind) {
                try {
                    if(kind === "TEXT") {
                        return webapis.avplay.getSubtitle();
                    }
                } catch(e) {
                    return [];
                }
            }
        };
    } else {
        // LG webOS implementation
        media_player = lg_player;
    }
}
🔍 2. Subtitle Fetching System
API Subtitle Request:
// Enhanced subtitle fetching with episode name parsing
function fetchSubtitles(movie_data, movie_type) {
    var subtitle_request_data = {
        movie_name: movie_data.name,
        movie_type: movie_type || 'movie'
    };
    // Enhanced episode name parsing for better subtitle matching
    if (movie_type === 'episode' && movie_data.name) {
        var episodeName = movie_data.name.toLowerCase();
        
        // Parse episode patterns like "The Witcher S01 E01"
        var seasonEpisodeMatch = episodeName.match(/s(\d+)\s*e(\d+)/i);
        if (seasonEpisodeMatch) {
            subtitle_request_data.season_number = parseInt(seasonEpisodeMatch[1]);
            subtitle_request_data.episode_number = parseInt(seasonEpisodeMatch[2]);
            
            // Extract clean series name
            var seriesName = episodeName.replace(/s\d+\s*e\d+.*$/i, '').trim();
            subtitle_request_data.movie_name = seriesName;
        }
    }
    // Prioritize TMDB ID if available
    if (movie_data.tmdb_id) {
        subtitle_request_data.tmdb_id = movie_data.tmdb_id;
    }
    // Make API request
    $.ajax({
        method: 'post',
        url: 'https://exoapp.tv/api/get-subtitles',
        data: subtitle_request_data,
        dataType: 'json',
        success: function(result) {
            if(result.status === 'success' && result.subtitles && result.subtitles.length > 0) {
                media_player.subtitles = result.subtitles;
                renderSubtitleMenu(result.subtitles, 'api');
            } else {
                // Fallback to native subtitles
                useNativeSubtitleFallback();
            }
        },
        error: function(error) {
            // Fallback to native subtitles on API error
            useNativeSubtitleFallback();
        }
    });
}
📱 3. Samsung Platform Implementation
Samsung Video Player Setup:
// Samsung Tizen Player (from mediaPlayer.js)
var samsung_player = {
    init: function(id, parent_id) {
        this.videoObj = document.getElementById(id);
        this.parent_id = parent_id;
        
        // Setup subtitle container
        $('#' + this.parent_id).find('.subtitle-container').html("");
        $('#' + this.parent_id).find('.subtitle-container').show();
    },
    playAsync: function(url) {
        try {
            webapis.avplay.open(url);
            this.setupEventListeners();
            webapis.avplay.setBufferingParam("PLAYER_BUFFER_FOR_PLAY", "PLAYER_BUFFER_SIZE_IN_SECOND", 4);
            webapis.avplay.prepareAsync();
        } catch(e) {
            console.error('Samsung play error:', e);
        }
    },
    setupEventListeners: function() {
        var that = this;
        
        webapis.avplay.setListener({
            onbufferingstart: function() {
                $('.video-loader').show();
            },
            onbufferingcomplete: function() {
                $('.video-loader').hide();
            },
            oncurrentplaytime: function(currentTime) {
                // Update subtitle timing for API subtitles
                if (typeof SrtOperation !== 'undefined' && !SrtOperation.stopped) {
                    SrtOperation.timeChange(currentTime / 1000); // Convert ms to seconds
                }
                
                // Update UI
                var duration = webapis.avplay.getDuration() / 1000;
                var currentSeconds = currentTime / 1000;
                $('#' + that.parent_id).find('.video-current-time').text(that.formatTime(currentSeconds));
                $('#' + that.parent_id).find('.progress-amount').css({
                    width: (currentSeconds / duration) * 100 + '%'
                });
            }
        });
    },
    // Samsung Native Subtitle Control
    setSubtitleOrAudioTrack: function(kind, index) {
        try {
            if(kind === "TEXT") {
                if(index === -1) {
                    // Disable native subtitles
                    webapis.avplay.setSubtitle(-1);
                } else {
                    // Enable native subtitle track
                    webapis.avplay.setSubtitle(index);
                }
            }
        } catch(e) {
            console.error('Samsung subtitle track error:', e);
        }
    },
    getSubtitleOrAudioTrack: function(kind) {
        try {
            if(kind === "TEXT") {
                return webapis.avplay.getSubtitle();
            }
        } catch(e) {
            return [];
        }
    }
};
📺 4. LG Platform Implementation
LG webOS Player Setup:
// LG webOS Player (from lg_player.js)
var lg_player = {
    init: function(id, parent_id) {
        this.id = id;
        this.videoObj = document.getElementById(id);
        this.parent_id = parent_id;
        this.current_time = 0;
        
        this.setupEventListeners();
    },
    setupEventListeners: function() {
        var that = this;
        
        this.videoObj.addEventListener("error", function(e) {
            $('#' + that.parent_id).find('.video-error').show();
        });
        this.videoObj.addEventListener("canplay", function(e) {
            $('#' + that.parent_id).find('.video-error').hide();
        });
        this.videoObj.addEventListener('loadeddata', function(event) {
            var duration = parseInt(that.videoObj.duration);
            $('#' + that.parent_id).find('.video-total-time').text(that.formatTime(duration));
        });
        // Critical: Timeline updates for subtitles
        this.videoObj.ontimeupdate = function(event) {
            var duration = that.videoObj.duration;
            var currentTime = that.videoObj.currentTime;
            
            if (duration > 0) {
                // Update progress bar
                $('#' + that.parent_id).find('.video-progress-bar-slider').val(currentTime).change();
                $('#' + that.parent_id).find('.video-current-time').html(that.formatTime(currentTime));
                $('#' + that.parent_id).find('.progress-amount').css({
                    width: currentTime / duration * 100 + '%'
                });
                
                // **CRITICAL**: Update subtitle timing
                if (typeof SrtOperation !== 'undefined' && !SrtOperation.stopped) {
                    SrtOperation.timeChange(currentTime);
                }
            }
        };
    },
    playAsync: function(url) {
        try {
            this.videoObj.src = url;
            this.videoObj.load();
            this.videoObj.play();
        } catch(e) {
            console.error('LG play error:', e);
        }
    },
    // LG Native Subtitle Control
    setSubtitleOrAudioTrack: function(kind, index) {
        try {
            if(kind === "TEXT" && this.videoObj.textTracks) {
                // Disable all tracks first
                for(var i = 0; i < this.videoObj.textTracks.length; i++) {
                    this.videoObj.textTracks[i].mode = 'hidden';
                }
                
                // Enable selected track
                if(index >= 0 && index < this.videoObj.textTracks.length) {
                    this.videoObj.textTracks[index].mode = 'showing';
                }
            }
        } catch(e) {
            console.error('LG subtitle track error:', e);
        }
    },
    getSubtitleOrAudioTrack: function(kind) {
        try {
            if(kind === "TEXT" && this.videoObj.textTracks) {
                var tracks = [];
                for(var i = 0; i < this.videoObj.textTracks.length; i++) {
                    tracks.push({
                        index: i,
                        label: this.videoObj.textTracks[i].label || `Track ${i + 1}`,
                        language: this.videoObj.textTracks[i].language || 'unknown'
                    });
                }
                return tracks;
            }
        } catch(e) {
            return [];
        }
    }
};
🔤 5. SRT Parser Engine
SRT Parsing Logic:
// SRT Parser (from srt_parser.js)
var SrtParser = {
    timestampToSeconds: function(srtTimestamp) {
        var parts = srtTimestamp.split(",");
        var timeString = parts[0];
        var milliseconds = parseInt(parts[1]);
        
        var timeParts = timeString.split(":").map(function(x) {
            return parseInt(x);
        });
        
        var hours = timeParts[0];
        var minutes = timeParts[1]; 
        var seconds = timeParts[2];
        
        return milliseconds * 0.001 + seconds + 60 * minutes + 3600 * hours;
    },
    correctFormat: function(time) {
        // Fix format inconsistencies
        var str = time.replace(".", ",");
        var parts = str.split(",");
        var timePart = parts[0];
        var milliseconds = parts[1];
        
        // Ensure proper formatting
        var timeComponents = timePart.split(":");
        var hours = this.fixed_str_digit(2, timeComponents[0], false);
        var minutes = this.fixed_str_digit(2, timeComponents[1], false);
        var seconds = this.fixed_str_digit(2, timeComponents[2], false);
        var ms = this.fixed_str_digit(3, milliseconds);
        
        return hours + ':' + minutes + ':' + seconds + ',' + ms;
    },
    fromSrt: function(data) {
        if(data.trim() == '') return [];
        
        data = data.replace(/\r/g, "");
        var regex = /(\d+)\n(\d{1,2}:\d{2}:\d{2},\d{1,3}) --> (\d{1,2}:\d{2}:\d{2},\d{1,3})/g;
        var dataArray = data.split(regex);
        dataArray.shift(); // Remove first empty element
        
        var items = [];
        for (var i = 0; i < dataArray.length; i += 4) {
            var startTime = this.correctFormat(dataArray[i + 1].trim());
            var endTime = this.correctFormat(dataArray[i + 2].trim());
            
            var subtitle = {
                id: dataArray[i].trim(),
                startTime: startTime,
                startSeconds: this.timestampToSeconds(startTime),
                endTime: endTime,
                endSeconds: this.timestampToSeconds(endTime),
                text: dataArray[i + 3].trim()
            };
            
            items.push(subtitle);
        }
        
        return items;
    }
};
⏱️ 6. Subtitle Display Engine
Real-time Subtitle Display:
// Subtitle Display Engine (from srt_operation.js)
var SrtOperation = {
    current_srt_index: 0,
    srt: [],
    stopped: false,
    subtitle_shown: false,
    init: function(subtitle, current_time) {
        // Clear existing subtitles
        $('#' + media_player.parent_id).find('.subtitle-container').html('');
        this.subtitle_shown = false;
        
        // Parse SRT content
        var srt = [];
        if(subtitle.content) {
            try {
                SrtParser.init();
                srt = SrtParser.fromSrt(subtitle.content);
            } catch(e) {
                console.error('SRT parsing error:', e);
            }
        }
        
        this.srt = srt;
        if(srt.length > 0) {
            this.stopped = false;
            // Find starting subtitle index
            this.current_srt_index = this.findIndex(current_time, 0, srt.length - 1);
            if(this.current_srt_index < 0) this.current_srt_index = 0;
        } else {
            this.stopped = true;
        }
    },
    findIndex: function(time, start, end) {
        // Binary search for subtitle at current time
        if(time == 0) return 0;
        
        var arr = this.srt;
        if(start > end) return end;
        
        let mid = Math.floor((start + end) / 2);
        
        if(arr[mid].startSeconds <= time && time < arr[mid].endSeconds) {
            return mid;
        }
        
        if(arr[mid].startSeconds > time) {
            return this.findIndex(time, start, mid - 1);
        } else {
            return this.findIndex(time, mid + 1, end);
        }
    },
    timeChange: function(current_time) {
        if(this.stopped || !this.srt || this.srt.length === 0) {
            return;
        }
        
        var srtIndex = this.current_srt_index;
        var srtItem = this.srt[srtIndex];
        
        // Check if current subtitle should be displayed
        if(current_time >= srtItem.startSeconds && current_time < srtItem.endSeconds) {
            if(!this.subtitle_shown) {
                this.showSubtitle(srtItem.text);
                this.subtitle_shown = true;
            }
        } else {
            // Hide subtitle when out of time range
            if(this.subtitle_shown) {
                this.hideSubtitle();
                this.subtitle_shown = false;
            }
            
            // Find next subtitle
            var newIndex = this.findIndex(current_time, 0, this.srt.length - 1);
            if(newIndex >= 0 && newIndex !== this.current_srt_index) {
                this.current_srt_index = newIndex;
            }
        }
    },
    showSubtitle: function(text) {
        var subtitleHtml = '<div class="subtitle-text">' + text.replace(/\n/g, '<br>') + '</div>';
        $('#' + media_player.parent_id).find('.subtitle-container').html(subtitleHtml);
    },
    hideSubtitle: function() {
        $('#' + media_player.parent_id).find('.subtitle-container').html('');
    },
    stopOperation: function() {
        this.stopped = true;
        this.hideSubtitle();
    }
};
🎮 7. Subtitle Selection Logic
Unified Subtitle Selection:
// Subtitle Selection Handler (from vod_series_player.js)
function confirmSubtitle(selectedCombinedIndex) {
    var selectedSubtitle = media_player.subtitles[selectedCombinedIndex];
    var subtitleSource = selectedSubtitle.source || 'api';
    
    if(subtitleSource === 'native') {
        // **NATIVE SUBTITLE**: Use platform-specific native tracks
        SrtOperation.stopOperation(); // Stop API subtitles
        
        var nativeIndex = selectedSubtitle.originalIndex || selectedSubtitle.index;
        
        if(typeof nativeIndex !== 'undefined' && nativeIndex !== null && !isNaN(nativeIndex)) {
            media_player.setSubtitleOrAudioTrack("TEXT", nativeIndex);
            this.current_subtitle_index = nativeIndex;
        } else {
            showToast("Error", "Invalid native subtitle index");
        }
        
    } else if(subtitleSource === 'api') {
        // **API SUBTITLE**: Stop native tracks and use SrtOperation
        
        // Disable native subtitles first (if they exist)
        if(platform === 'samsung' && window.subtitleMapping && window.subtitleMapping.hasNativeSubtitles) {
            try {
                media_player.setSubtitleOrAudioTrack("TEXT", -1);
            } catch(e) {
                console.error('Error disabling native subtitles:', e);
            }
        }
        
        // Load API subtitle file
        var subtitleFile = selectedSubtitle.apiData ? selectedSubtitle.apiData.file : selectedSubtitle.file;
        if(subtitleFile) {
            var subtitleUrl = subtitleFile;
            if(subtitleUrl.startsWith('/')) {
                subtitleUrl = 'https://exoapp.tv' + subtitleUrl;
            }
            
            var that = this;
            this.subtitle_loading = true;
            
            $.ajax({
                url: subtitleUrl,
                method: 'GET',
                dataType: 'text',
                success: function(subtitleContent) {
                    that.subtitle_loading = false;
                    that.subtitle_loaded = true;
                    
                    // Get current video time
                    var current_time = 0;
                    try {
                        if(platform === 'samsung' && typeof webapis !== 'undefined' && webapis.avplay) {
                            current_time = webapis.avplay.getCurrentTime() / 1000;
                        } else if(media_player.videoObj && media_player.videoObj.currentTime) {
                            current_time = media_player.videoObj.currentTime;
                        }
                    } catch(e) {
                        current_time = 0;
                    }
                    
                    // Initialize subtitle display
                    SrtOperation.init({content: subtitleContent}, current_time);
                    that.current_subtitle_index = selectedCombinedIndex;
                },
                error: function(error) {
                    that.subtitle_loading = false;
                    // Fallback to native subtitles on API error
                    useNativeSubtitleFallback();
                }
            });
        }
    }
}
🔧 8. CSS Styling
Subtitle Container Styling:
/* Subtitle Display Container */
.subtitle-container {
    position: absolute;
    bottom: 10%;
    left: 50%;
    transform: translateX(-50%);
    z-index: 1000;
    text-align: center;
    max-width: 80%;
    pointer-events: none;
}
.subtitle-text {
    background: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 8px 16px;
    border-radius: 4px;
    font-size: 24px;
    line-height: 1.4;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.9);
    display: inline-block;
    white-space: pre-line;
}
/* TV-optimized subtitle styling */
@media screen and (min-width: 1920px) {
    .subtitle-text {
        font-size: 32px;
        padding: 12px 24px;
    }
}
📊 9. Usage Summary
Key Integration Points:
Initialize: Call initPlayer() to detect platform
Fetch: Use fetchSubtitles() to get API subtitles with native fallback
Select: Call confirmSubtitle() when user chooses a subtitle
Display: Platform players automatically sync with SrtOperation.timeChange()
Platform Differences:
Feature	Samsung Tizen	LG webOS
Video API	webapis.avplay	HTML5 <video>
Time Events	oncurrentplaytime	ontimeupdate
Native Subs	webapis.avplay.setSubtitle()	textTracks[].mode
Time Format	Milliseconds	Seconds