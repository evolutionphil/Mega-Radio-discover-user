Request URL Example:
GET https://your-panel.com/player_api.php?
    username=your_username&
    password=your_password&
    action=get_vod_info&
    vod_id=12345
API Response Structure:
{
    "info": {
        "tmdb_id": "603",
        "name": "The Matrix",
        "releasedate": "1999-03-31",
        "genre": "Action, Science Fiction",
        "duration": "02:16:00",
        "director": "The Wachowskis",
        "cast": "Keanu Reeves, Laurence Fishburne, Carrie-Anne Moss",
        "description": "A computer hacker learns...",
        "backdrop_path": ["https://image.tmdb.org/..."],
        "youtube_trailer": "vKQi3bBA1y8",
        "video": {
            "width": 1920,
            "height": 1080,
            "codec_long_name": "H.264"
        }
    }
}
TMDB Extraction & Storage:
// From vod_summary.js (lines 103-109)
.done(function(response) {
    console.log('=== XTREME API get_vod_info RESPONSE ANALYSIS ===');
    console.log('Full API response:', response);
    console.log('Info object:', response.info);
    console.log('TMDB ID check:', response.info.tmdb_id);
    
    var info = response.info;
    current_movie.info = info;
    
    // CRITICAL: Extract TMDB ID from API response
    if(info.tmdb_id) {
        current_movie.tmdb_id = info.tmdb_id;
        console.log('‚úÖ TMDB ID extracted and stored:', current_movie.tmdb_id);
    } else {
        console.log('‚ö†Ô∏è NO TMDB ID in API response - subtitle matching will be less accurate');
    }
    
    // Store other metadata
    $('#vod-summary-release-date').text(info.releasedate);
    $('#vod-summary-release-genre').text(info.genre);
    $('#vod-summary-release-length').text(info.duration);
    $('#vod-summary-description').text(info.description);
})
üì∫ 2. Series TMDB Fetching
API Request for Series:
// From series_summary.js (line 81)
$.getJSON(api_host_url + '/player_api.php?username=' + user_name + 
          '&password=' + password + 
          '&action=get_series_info&series_id=' + current_series.series_id)
Request URL Example:
GET https://your-panel.com/player_api.php?
    username=your_username&
    password=your_password&
    action=get_series_info&
    series_id=67890
API Response Structure:
{
    "info": {
        "tmdb_id": "71912",
        "name": "The Witcher",
        "releasedate": "2019-12-20",
        "genre": "Action & Adventure, Drama, Sci-Fi & Fantasy",
        "cast": "Henry Cavill, Anya Chalotra, Freya Allan",
        "director": "Lauren Schmidt Hissrich",
        "plot": "Geralt of Rivia, a mutated monster-hunter...",
        "backdrop_path": ["https://image.tmdb.org/..."],
        "movie_image": "https://image.tmdb.org/..."
    },
    "seasons": [
        {
            "season_number": 1,
            "name": "Season 1",
            "cover": "https://image.tmdb.org/..."
        },
        {
            "season_number": 2,
            "name": "Season 2", 
            "cover": "https://image.tmdb.org/..."
        }
    ],
    "episodes": {
        "1": [
            {
                "id": "123456",
                "title": "The End's Beginning",
                "info": {
                    "tmdb_id": "1588705",
                    "plot": "Geralt fights a kikimore...",
                    "releasedate": "2019-12-20",
                    "movie_image": "https://image.tmdb.org/..."
                }
            }
        ]
    }
}
TMDB Extraction & Storage:
// From series_summary.js (lines 95-101)
.done(function(response) {
    console.log('=== XTREME API get_series_info RESPONSE ANALYSIS ===');
    console.log('Full API response:', response);
    console.log('Info object:', response.info);
    console.log('TMDB ID check:', response.info.tmdb_id);
    
    current_series.info = response.info;
    
    // CRITICAL: Extract TMDB ID from API response for series
    if(response.info && response.info.tmdb_id) {
        current_series.tmdb_id = response.info.tmdb_id;
        console.log('‚úÖ SERIES TMDB ID extracted and stored:', current_series.tmdb_id);
    } else {
        console.log('‚ö†Ô∏è NO SERIES TMDB ID in API response - subtitle matching will be less accurate');
    }
    
    // Process seasons and episodes
    var seasons = response.seasons;
    var episodes = response.episodes;
    
    // Each episode also has its own TMDB ID in episode.info.tmdb_id
    current_series.seasons = seasons;
})
üîó 3. TMDB Usage in Subtitle Requests
Movie Subtitle Request:
// From vod_series_player.js (lines 800-803)
if(this.current_movie_type === 'movies') {
    subtitle_request_data = {
        movie_name: cleaned_name,
        movie_type: 'movie'
    };
    
    // Add TMDB ID if available (highest priority for matching)
    if(this.current_movie.tmdb_id) {
        subtitle_request_data.tmdb_id = this.current_movie.tmdb_id;
    }
    
    if(extracted_year) {
        subtitle_request_data.year = extracted_year;
    }
}
Series Episode Subtitle Request:
// From vod_series_player.js (lines 824-827)
else {
    subtitle_request_data = {
        movie_type: 'episode'
    };
    
    // Primary: Use episode TMDB ID from this.current_movie.info.tmdb_id
    if(this.current_movie && this.current_movie.info && this.current_movie.info.tmdb_id) {
        subtitle_request_data.tmdb_id = String(this.current_movie.info.tmdb_id);
    } else {
        // Fallback: Parse episode name for series info
        var parsed_episode = this.parseEpisodeName(episode_name);
        
        if(parsed_episode.series_name) {
            var formatted_name = parsed_episode.series_name.toLowerCase();
            
            if(parsed_episode.season_number && parsed_episode.episode_number) {
                var season_str = 's' + String(parsed_episode.season_number).padStart(2, '0');
                var episode_str = 'e' + String(parsed_episode.episode_number).padStart(2, '0');
                formatted_name = formatted_name + ' ' + season_str + ' ' + episode_str;
            }
            
            subtitle_request_data.movie_name = formatted_name;
            
            // Use series TMDB ID if available
            if(this.current_movie.info && this.current_movie.info.tmdb_id) {
                subtitle_request_data.id = String(this.current_movie.info.tmdb_id);
            }
        }
    }
}
üìä 4. Data Flow Timeline
Complete TMDB Data Flow:
User Selects Content: Movie or Series clicked
Summary Page Load: vod_summary.js or series_summary.js triggered
API Request Made:
Movies: get_vod_info&vod_id={id}
Series: get_series_info&series_id={id}
Response Processing: TMDB ID extracted from response.info.tmdb_id
Storage:
Movies: current_movie.tmdb_id = info.tmdb_id
Series: current_series.tmdb_id = info.tmdb_id
Episodes: episode.info.tmdb_id (individual episode IDs)
Subtitle Request: TMDB ID passed to subtitle API for precise matching
TMDB ID Hierarchy for Series:
Series TMDB ID (71912) - "The Witcher"
‚îú‚îÄ‚îÄ Season 1
‚îÇ   ‚îú‚îÄ‚îÄ Episode 1 TMDB ID (1588705) - "The End's Beginning"
‚îÇ   ‚îú‚îÄ‚îÄ Episode 2 TMDB ID (1588706) - "Four Marks"
‚îÇ   ‚îî‚îÄ‚îÄ Episode 3 TMDB ID (1588707) - "Betrayer Moon"
‚îú‚îÄ‚îÄ Season 2
‚îÇ   ‚îú‚îÄ‚îÄ Episode 1 TMDB ID (2916796) - "A Grain of Truth"
‚îÇ   ‚îî‚îÄ‚îÄ Episode 2 TMDB ID (2916797) - "Kaer Morhen"
üéØ 5. API Request Examples
Movie Request:
curl "https://your-panel.com/player_api.php?username=test&password=test&action=get_vod_info&vod_id=12345"
Series Request:
curl "https://your-panel.com/player_api.php?username=test&password=test&action=get_series_info&series_id=67890"
Resulting Subtitle Request:
// Movie
POST https://exoapp.tv/api/get-subtitles
{
    "movie_name": "The Matrix",
    "movie_type": "movie", 
    "tmdb_id": "603",
    "year": 1999
}
// Series Episode
POST https://exoapp.tv/api/get-subtitles
{
    "movie_type": "episode",
    "tmdb_id": "1588705"  // Episode-specific TMDB ID
}